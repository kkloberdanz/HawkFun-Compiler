{
 (* File Fun/Funlex.fsl 
    Lexer for a simple functional language (micro-ML) 
    P. Sestoft, 2009-10-19
    C. Tinelli, 2016-10-19
  *)

module Lexer

open Microsoft.FSharp.Text.Lexing
open Parser;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Distinguish keywords from identifiers: *)

let keyword s =
    match s with
	| "bool" -> BOOL
	| "else" -> ELSE
	| "end" -> END
	| "false" -> FALSE
	| "fn" -> FN
	| "fun"   -> FUN
	| "hd" -> HD
	| "if" -> IF
	| "in" -> IN
	| "int" -> INT
	| "ise" -> ISE
	| "list" -> LIST
	| "local" -> LOCAL
	| "not" -> NOT
	| "null" -> NULL
	| "print"    -> PRINT
    | "rec" -> REC
	| "then" -> THEN
	| "true" -> TRUE
	| "unit" -> UNIT
	| "var" -> VAR
    | _       -> NAME s
}

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | '='             { EQ }
  | "<>"            { NE }
  | '<'             { LT }
  | '+'             { PLUS }                     
  | '-'             { MINUS }                     
  | '*'             { TIMES }                     
  | '/'             { DIV }                     
  | '('             { LPAR }
  | ')'             { RPAR }
  | '::'			{ APPEND }
  | '=>'			{ ARROW }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

