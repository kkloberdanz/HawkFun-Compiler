// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

 (* File Parser.fsy 

  *)

 open Absyn;

# 14 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | RBRAK
  | LBRAK
  | EQ
  | NE
  | LT
  | LTE
  | APPEND
  | SEMICOL
  | COL
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | TL
  | LAM
  | ARROW
  | TYPEAR
  | BOOL
  | ELSE
  | END
  | FALSE
  | FN
  | FUN
  | HD
  | IF
  | IN
  | INT
  | ISE
  | LIST
  | LOCAL
  | NOT
  | NULL
  | PRINT
  | REC
  | THEN
  | TRUE
  | UNIT
  | VAR
  | LESEQ
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_RBRAK
    | TOKEN_LBRAK
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_APPEND
    | TOKEN_SEMICOL
    | TOKEN_COL
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_TL
    | TOKEN_LAM
    | TOKEN_ARROW
    | TOKEN_TYPEAR
    | TOKEN_BOOL
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_FN
    | TOKEN_FUN
    | TOKEN_HD
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_INT
    | TOKEN_ISE
    | TOKEN_LIST
    | TOKEN_LOCAL
    | TOKEN_NOT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_REC
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_UNIT
    | TOKEN_VAR
    | TOKEN_LESEQ
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_Const
    | NONTERM_TypedName
    | NONTERM_Bindings
    | NONTERM_Binding
    | NONTERM_AppExpr
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | RBRAK  -> 3 
  | LBRAK  -> 4 
  | EQ  -> 5 
  | NE  -> 6 
  | LT  -> 7 
  | LTE  -> 8 
  | APPEND  -> 9 
  | SEMICOL  -> 10 
  | COL  -> 11 
  | PLUS  -> 12 
  | MINUS  -> 13 
  | TIMES  -> 14 
  | DIV  -> 15 
  | TL  -> 16 
  | LAM  -> 17 
  | ARROW  -> 18 
  | TYPEAR  -> 19 
  | BOOL  -> 20 
  | ELSE  -> 21 
  | END  -> 22 
  | FALSE  -> 23 
  | FN  -> 24 
  | FUN  -> 25 
  | HD  -> 26 
  | IF  -> 27 
  | IN  -> 28 
  | INT  -> 29 
  | ISE  -> 30 
  | LIST  -> 31 
  | LOCAL  -> 32 
  | NOT  -> 33 
  | NULL  -> 34 
  | PRINT  -> 35 
  | REC  -> 36 
  | THEN  -> 37 
  | TRUE  -> 38 
  | UNIT  -> 39 
  | VAR  -> 40 
  | LESEQ  -> 41 
  | CSTBOOL _ -> 42 
  | NAME _ -> 43 
  | CSTINT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_RBRAK 
  | 4 -> TOKEN_LBRAK 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_NE 
  | 7 -> TOKEN_LT 
  | 8 -> TOKEN_LTE 
  | 9 -> TOKEN_APPEND 
  | 10 -> TOKEN_SEMICOL 
  | 11 -> TOKEN_COL 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_MINUS 
  | 14 -> TOKEN_TIMES 
  | 15 -> TOKEN_DIV 
  | 16 -> TOKEN_TL 
  | 17 -> TOKEN_LAM 
  | 18 -> TOKEN_ARROW 
  | 19 -> TOKEN_TYPEAR 
  | 20 -> TOKEN_BOOL 
  | 21 -> TOKEN_ELSE 
  | 22 -> TOKEN_END 
  | 23 -> TOKEN_FALSE 
  | 24 -> TOKEN_FN 
  | 25 -> TOKEN_FUN 
  | 26 -> TOKEN_HD 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_IN 
  | 29 -> TOKEN_INT 
  | 30 -> TOKEN_ISE 
  | 31 -> TOKEN_LIST 
  | 32 -> TOKEN_LOCAL 
  | 33 -> TOKEN_NOT 
  | 34 -> TOKEN_NULL 
  | 35 -> TOKEN_PRINT 
  | 36 -> TOKEN_REC 
  | 37 -> TOKEN_THEN 
  | 38 -> TOKEN_TRUE 
  | 39 -> TOKEN_UNIT 
  | 40 -> TOKEN_VAR 
  | 41 -> TOKEN_LESEQ 
  | 42 -> TOKEN_CSTBOOL 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_CSTINT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_AtExpr 
    | 21 -> NONTERM_AtExpr 
    | 22 -> NONTERM_AtExpr 
    | 23 -> NONTERM_AtExpr 
    | 24 -> NONTERM_AtExpr 
    | 25 -> NONTERM_AtExpr 
    | 26 -> NONTERM_Const 
    | 27 -> NONTERM_Const 
    | 28 -> NONTERM_Const 
    | 29 -> NONTERM_Const 
    | 30 -> NONTERM_TypedName 
    | 31 -> NONTERM_Bindings 
    | 32 -> NONTERM_Bindings 
    | 33 -> NONTERM_Binding 
    | 34 -> NONTERM_Binding 
    | 35 -> NONTERM_Binding 
    | 36 -> NONTERM_Binding 
    | 37 -> NONTERM_Binding 
    | 38 -> NONTERM_AppExpr 
    | 39 -> NONTERM_AppExpr 
    | 40 -> NONTERM_Type 
    | 41 -> NONTERM_Type 
    | 42 -> NONTERM_Type 
    | 43 -> NONTERM_Type 
    | 44 -> NONTERM_Type 
    | 45 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | RBRAK  -> "RBRAK" 
  | LBRAK  -> "LBRAK" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | APPEND  -> "APPEND" 
  | SEMICOL  -> "SEMICOL" 
  | COL  -> "COL" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | TL  -> "TL" 
  | LAM  -> "LAM" 
  | ARROW  -> "ARROW" 
  | TYPEAR  -> "TYPEAR" 
  | BOOL  -> "BOOL" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | FN  -> "FN" 
  | FUN  -> "FUN" 
  | HD  -> "HD" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | INT  -> "INT" 
  | ISE  -> "ISE" 
  | LIST  -> "LIST" 
  | LOCAL  -> "LOCAL" 
  | NOT  -> "NOT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | REC  -> "REC" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | UNIT  -> "UNIT" 
  | VAR  -> "VAR" 
  | LESEQ  -> "LESEQ" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | APPEND  -> (null : System.Object) 
  | SEMICOL  -> (null : System.Object) 
  | COL  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | TL  -> (null : System.Object) 
  | LAM  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | TYPEAR  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | HD  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | LOCAL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | LESEQ  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 25us; 65535us; 0us; 2us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 25us; 42us; 26us; 43us; 27us; 44us; 28us; 45us; 29us; 47us; 30us; 48us; 31us; 53us; 32us; 57us; 33us; 59us; 34us; 79us; 35us; 83us; 36us; 90us; 37us; 27us; 65535us; 0us; 4us; 4us; 92us; 5us; 93us; 6us; 4us; 8us; 4us; 10us; 4us; 12us; 4us; 14us; 4us; 16us; 4us; 18us; 4us; 20us; 4us; 38us; 4us; 39us; 4us; 40us; 4us; 41us; 4us; 42us; 4us; 43us; 4us; 44us; 4us; 45us; 4us; 47us; 4us; 48us; 4us; 53us; 4us; 57us; 4us; 59us; 4us; 79us; 4us; 83us; 4us; 90us; 4us; 27us; 65535us; 0us; 49us; 4us; 49us; 5us; 49us; 6us; 49us; 8us; 49us; 10us; 49us; 12us; 49us; 14us; 49us; 16us; 49us; 18us; 49us; 20us; 49us; 38us; 49us; 39us; 49us; 40us; 49us; 41us; 49us; 42us; 49us; 43us; 49us; 44us; 49us; 45us; 49us; 47us; 49us; 48us; 49us; 53us; 49us; 57us; 49us; 59us; 49us; 79us; 49us; 83us; 49us; 90us; 49us; 3us; 65535us; 55us; 56us; 81us; 82us; 86us; 87us; 2us; 65535us; 51us; 52us; 75us; 76us; 2us; 65535us; 51us; 75us; 75us; 75us; 25us; 65535us; 0us; 5us; 6us; 5us; 8us; 5us; 10us; 5us; 12us; 5us; 14us; 5us; 16us; 5us; 18us; 5us; 20us; 5us; 38us; 5us; 39us; 5us; 40us; 5us; 41us; 5us; 42us; 5us; 43us; 5us; 44us; 5us; 45us; 5us; 47us; 5us; 48us; 5us; 53us; 5us; 57us; 5us; 59us; 5us; 79us; 5us; 83us; 5us; 90us; 5us; 5us; 65535us; 63us; 64us; 72us; 73us; 88us; 89us; 99us; 97us; 101us; 98us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 29us; 57us; 85us; 89us; 92us; 95us; 121us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 11us; 1us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 1us; 2us; 2us; 38us; 2us; 3us; 39us; 1us; 4us; 11us; 4us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 4us; 11us; 4us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 4us; 11us; 4us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 5us; 11us; 5us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 6us; 11us; 6us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 7us; 11us; 7us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 8us; 11us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 9us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 22us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 23us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 24us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 33us; 12us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 34us; 35us; 12us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 36us; 37us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 2us; 24us; 25us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 3us; 25us; 43us; 44us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 3us; 30us; 43us; 44us; 1us; 30us; 2us; 31us; 32us; 1us; 31us; 1us; 33us; 1us; 33us; 1us; 33us; 4us; 34us; 35us; 36us; 37us; 2us; 34us; 35us; 2us; 34us; 35us; 2us; 34us; 35us; 1us; 35us; 2us; 36us; 37us; 2us; 36us; 37us; 2us; 36us; 37us; 2us; 36us; 37us; 4us; 36us; 37us; 43us; 44us; 2us; 36us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 3us; 43us; 43us; 44us; 3us; 43us; 44us; 45us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 45us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 16us; 18us; 21us; 24us; 26us; 38us; 40us; 52us; 54us; 66us; 68us; 80us; 82us; 94us; 96us; 108us; 110us; 122us; 124us; 136us; 148us; 160us; 172us; 184us; 196us; 208us; 220us; 232us; 244us; 256us; 268us; 280us; 292us; 304us; 317us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 375us; 377us; 379us; 381us; 383us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 407us; 409us; 412us; 414us; 416us; 418us; 420us; 425us; 428us; 431us; 434us; 436us; 439us; 442us; 445us; 448us; 453us; 456us; 458us; 460us; 462us; 464us; 466us; 468us; 472us; 476us; 478us; 480us; 482us; |]
let _fsyacc_action_rows = 103
let _fsyacc_actionTableElements = [|14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 49152us; 11us; 32768us; 0us; 3us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 0us; 16385us; 8us; 16386us; 1us; 59us; 23us; 68us; 24us; 55us; 32us; 51us; 34us; 69us; 38us; 67us; 43us; 50us; 44us; 66us; 8us; 16387us; 1us; 59us; 23us; 68us; 24us; 55us; 32us; 51us; 34us; 69us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 11us; 32768us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 37us; 8us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 11us; 32768us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 21us; 10us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 9us; 16388us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 1us; 16389us; 11us; 46us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 1us; 16390us; 11us; 46us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 1us; 16391us; 11us; 46us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 1us; 16392us; 11us; 46us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 1us; 16393us; 11us; 46us; 3us; 16394us; 11us; 46us; 14us; 40us; 15us; 41us; 3us; 16395us; 11us; 46us; 14us; 40us; 15us; 41us; 1us; 16396us; 11us; 46us; 1us; 16397us; 11us; 46us; 7us; 16398us; 7us; 44us; 8us; 45us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 7us; 16399us; 7us; 44us; 8us; 45us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 7us; 16400us; 7us; 44us; 8us; 45us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 7us; 16401us; 7us; 44us; 8us; 45us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 10us; 16402us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 10us; 16403us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 11us; 32768us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 22us; 54us; 11us; 32768us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 22us; 58us; 11us; 32768us; 2us; 60us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 10us; 16417us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 11us; 16418us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 22us; 84us; 11us; 16420us; 5us; 42us; 6us; 43us; 7us; 44us; 8us; 45us; 10us; 48us; 11us; 46us; 12us; 38us; 13us; 39us; 14us; 40us; 15us; 41us; 22us; 91us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 1us; 32768us; 11us; 47us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 16404us; 0us; 16405us; 2us; 32768us; 25us; 80us; 40us; 77us; 1us; 32768us; 28us; 53us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 16406us; 1us; 32768us; 1us; 70us; 1us; 32768us; 18us; 57us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 16407us; 15us; 32768us; 1us; 59us; 4us; 61us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 16408us; 1us; 32768us; 3us; 62us; 1us; 32768us; 11us; 63us; 4us; 32768us; 1us; 101us; 20us; 95us; 29us; 96us; 39us; 94us; 3us; 32768us; 2us; 65us; 19us; 99us; 31us; 100us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 1us; 32768us; 43us; 71us; 1us; 32768us; 11us; 72us; 4us; 32768us; 1us; 101us; 20us; 95us; 29us; 96us; 39us; 94us; 3us; 32768us; 2us; 74us; 19us; 99us; 31us; 100us; 0us; 16414us; 2us; 16416us; 25us; 80us; 40us; 77us; 0us; 16415us; 1us; 32768us; 43us; 78us; 1us; 32768us; 5us; 79us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 2us; 32768us; 36us; 85us; 43us; 81us; 1us; 32768us; 1us; 70us; 1us; 32768us; 5us; 83us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 16419us; 1us; 32768us; 43us; 86us; 1us; 32768us; 1us; 70us; 1us; 32768us; 11us; 88us; 4us; 32768us; 1us; 101us; 20us; 95us; 29us; 96us; 39us; 94us; 3us; 32768us; 5us; 90us; 19us; 99us; 31us; 100us; 14us; 32768us; 1us; 59us; 16us; 16us; 23us; 68us; 24us; 55us; 26us; 14us; 27us; 6us; 30us; 18us; 32us; 51us; 33us; 12us; 34us; 69us; 35us; 20us; 38us; 67us; 43us; 50us; 44us; 66us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 2us; 16427us; 19us; 99us; 31us; 100us; 3us; 32768us; 2us; 102us; 19us; 99us; 31us; 100us; 4us; 32768us; 1us; 101us; 20us; 95us; 29us; 96us; 39us; 94us; 0us; 16428us; 4us; 32768us; 1us; 101us; 20us; 95us; 29us; 96us; 39us; 94us; 0us; 16429us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 28us; 29us; 38us; 47us; 62us; 74us; 89us; 101us; 116us; 126us; 141us; 143us; 158us; 160us; 175us; 177us; 192us; 194us; 209us; 211us; 215us; 219us; 221us; 223us; 231us; 239us; 247us; 255us; 266us; 277us; 289us; 301us; 313us; 324us; 336us; 348us; 363us; 378us; 393us; 408us; 423us; 438us; 453us; 468us; 470us; 485us; 500us; 501us; 502us; 505us; 507us; 522us; 523us; 525us; 527us; 542us; 543us; 559us; 560us; 562us; 564us; 569us; 573us; 574us; 575us; 576us; 577us; 578us; 580us; 582us; 587us; 591us; 592us; 595us; 596us; 598us; 600us; 615us; 618us; 620us; 622us; 637us; 638us; 640us; 642us; 644us; 649us; 653us; 668us; 669us; 670us; 671us; 672us; 673us; 674us; 677us; 681us; 686us; 687us; 692us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 1us; 1us; 5us; 5us; 3us; 6us; 1us; 1us; 1us; 1us; 5us; 2us; 1us; 4us; 5us; 6us; 8us; 9us; 2us; 2us; 1us; 1us; 1us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 16405us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 16409us; 16410us; 16411us; 16412us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 65535us; 65535us; 65535us; 16428us; 65535us; 16429us; |]
let _fsyacc_reductions ()  =    [| 
# 387 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 396 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                 _1                     
                   )
# 46 "Parser.fsy"
                 : Absyn.expr));
# 407 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                _1                     
                   )
# 51 "Parser.fsy"
                 : Absyn.expr));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                _1                     
                   )
# 52 "Parser.fsy"
                 : Absyn.expr));
# 429 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                (If (_2, _4, _6), AnyT)
                   )
# 53 "Parser.fsy"
                 : Absyn.expr));
# 442 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                               (Op1 ("not", _2), BoolT)
                   )
# 54 "Parser.fsy"
                 : Absyn.expr));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                               (Op1 ("hd" , _2), AnyT) 
                   )
# 55 "Parser.fsy"
                 : Absyn.expr));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                               (Op1 ("tl" , _2), AnyT) 
                   )
# 56 "Parser.fsy"
                 : Absyn.expr));
# 475 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                               (Op1 ("ise", _2), BoolT) 
                   )
# 57 "Parser.fsy"
                 : Absyn.expr));
# 486 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                               (Op1 ("print", _2), AnyT)
                   )
# 58 "Parser.fsy"
                 : Absyn.expr));
# 497 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                               (Op2 ("+",  _1, _3), AnyT)
                   )
# 59 "Parser.fsy"
                 : Absyn.expr));
# 509 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               (Op2 ("-",  _1, _3), AnyT)
                   )
# 60 "Parser.fsy"
                 : Absyn.expr));
# 521 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                               (Op2 ("*",  _1, _3), AnyT)
                   )
# 61 "Parser.fsy"
                 : Absyn.expr));
# 533 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                               (Op2 ("/",  _1, _3), AnyT)
                   )
# 62 "Parser.fsy"
                 : Absyn.expr));
# 545 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                               (Op2 ("=",  _1, _3), AnyT)
                   )
# 63 "Parser.fsy"
                 : Absyn.expr));
# 557 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                               (Op2 ("<>", _1, _3), AnyT)
                   )
# 64 "Parser.fsy"
                 : Absyn.expr));
# 569 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                               (Op2 ("<",  _1, _3), AnyT)
                   )
# 65 "Parser.fsy"
                 : Absyn.expr));
# 581 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                               (Op2 ("<=",  _1, _3), AnyT)
                   )
# 66 "Parser.fsy"
                 : Absyn.expr));
# 593 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                               (Op2 ("::",  _1, _4), AnyT)
                   )
# 67 "Parser.fsy"
                 : Absyn.expr));
# 605 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                               (Op2 (";",  _1, _3), AnyT)
                   )
# 68 "Parser.fsy"
                 : Absyn.expr));
# 617 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                       _1                      
                   )
# 74 "Parser.fsy"
                 : Absyn.expr));
# 628 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                              (Var (_1), AnyT)        
                   )
# 75 "Parser.fsy"
                 : Absyn.expr));
# 639 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.binding list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                        List.foldBack (fun b e -> (Let (b,e),AnyT)) _2 _4 
                   )
# 77 "Parser.fsy"
                 : Absyn.expr));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                              (Lam (_2, _4), AnyT)    
                   )
# 78 "Parser.fsy"
                 : Absyn.expr));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                              _2                      
                   )
# 79 "Parser.fsy"
                 : Absyn.expr));
# 674 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                              (EListC, _5) 
                   )
# 80 "Parser.fsy"
                 : Absyn.expr));
# 685 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                        (Con _1, IntT)        
                   )
# 84 "Parser.fsy"
                 : Absyn.expr));
# 696 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                              (Con 1, BoolT)          
                   )
# 85 "Parser.fsy"
                 : Absyn.expr));
# 706 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                              (Con 0, BoolT)          
                   )
# 86 "Parser.fsy"
                 : Absyn.expr));
# 716 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                              (Con 0, UnitT)          
                   )
# 87 "Parser.fsy"
                 : Absyn.expr));
# 726 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                            (_2, _4)  
                   )
# 91 "Parser.fsy"
                 : Absyn.tname));
# 738 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.binding)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.binding list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                _1 :: _2 
                   )
# 95 "Parser.fsy"
                 : Absyn.binding list));
# 750 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.binding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                   [ _1 ]  
                   )
# 96 "Parser.fsy"
                 : Absyn.binding list));
# 761 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                V(_2, _4)  		
                   )
# 100 "Parser.fsy"
                 : Absyn.binding));
# 773 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                         V(_2, (Lam(_3, _5), AnyT))		
                   )
# 101 "Parser.fsy"
                 : Absyn.binding));
# 786 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                            V(_2, (Lam(_3, _5), AnyT))		
                   )
# 102 "Parser.fsy"
                 : Absyn.binding));
# 799 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                   F(_3, _4, _6, _8) 
                   )
# 103 "Parser.fsy"
                 : Absyn.binding));
# 813 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                      F(_3, _4, _6, _8) 
                   )
# 104 "Parser.fsy"
                 : Absyn.binding));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                             (Call (_1, _2), AnyT)           
                   )
# 108 "Parser.fsy"
                 : Absyn.expr));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                              (Call (_1, _2), AnyT)           
                   )
# 109 "Parser.fsy"
                 : Absyn.expr));
# 851 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                       UnitT 
                   )
# 113 "Parser.fsy"
                 : Absyn.htype));
# 861 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                               BoolT 
                   )
# 114 "Parser.fsy"
                 : Absyn.htype));
# 871 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                               IntT  
                   )
# 115 "Parser.fsy"
                 : Absyn.htype));
# 881 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                               ArrowT (_1, _3) 
                   )
# 116 "Parser.fsy"
                 : Absyn.htype));
# 893 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                               ListT _1 
                   )
# 117 "Parser.fsy"
                 : Absyn.htype));
# 904 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                               _2 
                   )
# 118 "Parser.fsy"
                 : Absyn.htype));
|]
# 916 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
