%{
 (* File Fun/FunPar.fsy 
    Parser for micro-ML, a small functional language; one-argument functions.
    P. Sestoft, 2009-10-19
    C. Tinelli, 2016-10-19
  *)

 open Absyn;
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

%token ELSE END FALSE IF IN LET NOT THEN TRUE
%token PLUS MINUS TIMES DIV
%token EQ NE LT
%token LPAR RPAR 
%token EOF

%left ELSE              /* lowest precedence  */
%left EQ NE 
%nonassoc LT
%left PLUS MINUS
%left TIMES DIV 
%nonassoc NOT           /* highest precedence  */

%start Main
%type <Absyn.expr> Main Expr AtExpr Const
%type <Absyn.expr> AppExpr

%%

Main:
    Expr EOF                            { $1 }
;

Expr:
    AtExpr                              { $1                      }
  | AppExpr                             { $1                      }
  | IF Expr THEN Expr ELSE Expr         { If ($2, $4, $6)         }
  | MINUS Expr                          { Prim ("-", CstI 0, $2)  }
  | Expr PLUS  Expr                     { Prim ("+",  $1, $3)     }
  | Expr MINUS Expr                     { Prim ("-",  $1, $3)     }
  | Expr TIMES Expr                     { Prim ("*",  $1, $3)     }
  | Expr DIV   Expr                     { Prim ("/",  $1, $3)     } 
  | Expr EQ    Expr                     { Prim ("=",  $1, $3)     }
  | Expr NE    Expr                     { Prim ("<>", $1, $3)     }
  | Expr LT    Expr                     { Prim ("<",  $1, $3)     }
;

AtExpr:
    Const                               { $1                      }
  | NAME                                { Var $1                  }
  | LET NAME EQ Expr IN Expr END        { Let ($2, $4, $6)        }
  | LET NAME NAME EQ Expr IN Expr END   { Letfun ($2, $3, $5, $7) }
  | LPAR Expr RPAR                      { $2                      }
;

AppExpr:
    AtExpr AtExpr                       { Call ($1, $2)           }
  | AppExpr AtExpr                      { Call ($1, $2)           }
;

Const:
    CSTINT                              { CstI ($1)               }
  | CSTBOOL                             { CstB ($1)               }
;
