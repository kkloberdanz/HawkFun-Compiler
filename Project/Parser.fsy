%{
 (* File Parser.fsy 

  *)

 open Absyn;
%}

/* TODO: How to add RBRAK LBRAK LAM NAT ? */

/* TODO: which tokens go where? */
%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL 
%token BOOL ELSE END FALSE FN FUN HD IF IN INT ISE LIST LOCAL NOT NULL PRINT REC THEN TRUE UNIT VAR
%token TL LAM ARROW
%token PLUS MINUS TIMES DIV
%token EQ NE LT LTE APPEND SEMICOL COL
%token LPAR RPAR 
%token EOF

/* lowest precedence  */
%right SEMICOL ARROW
%nonassoc IF
%left ELSE              
%left EQ NE 
%nonassoc LT LTE
%right APPEND
%left PLUS MINUS
%left TIMES DIV 
%nonassoc NOT HD TL ISE LIST PRINT F /* TODO: How to handle F? What is TL? */
/* highest precedence  */

%start Main
%type <Absyn.expr> Main Expr AtExpr Const
%type <Absyn.expr> AppExpr

%%

Main:
    Expr EOF                              { $1                     }
;

/* TODO: How to handle {} ? */
Expr:
    AtExpr                                { $1                     }
  | AppExpr                               { $1                     }
  | IF Expr THEN Expr ELSE Expr           { (If ($2, $4, $6), AnyT)}
  | NOT Expr                              {(Op1 ("not", $2), BoolT)}
  | HD  Expr                              {(Op1 ("hd" , $2), AnyT) }
  | TL  Expr                              {(Op1 ("tl" , $2), AnyT) }
  | ISE Expr                              {(Op1 ("ise", $2), BoolT) }
  | PRINT Expr                            {(Op1 ("print", $2), AnyT)}
  | Expr PLUS    Expr                     {(Op2 ("+",  $1, $3), AnyT)}
  | Expr MINUS   Expr                     {(Op2 ("-",  $1, $3), AnyT)}
  | Expr TIMES   Expr                     {(Op2 ("*",  $1, $3), AnyT)}
  | Expr DIV     Expr                     {(Op2 ("/",  $1, $3), AnyT)} 
  | Expr EQ      Expr                     {(Op2 ("=",  $1, $3), AnyT)}
  | Expr NE      Expr                     {(Op2 ("<>", $1, $3), AnyT)}
  | Expr LT      Expr                     {(Op2 ("<",  $1, $3), AnyT)}
  | Expr LTE     Expr                     {(Op2 ("<=",  $1, $3), AnyT)}
  | Expr APPEND  Expr                     {(Op2 ("::",  $1, $3), AnyT)}
  | Expr SEMICOL Expr                     {(Op2 (";",  $1, $3), AnyT)}
;

/* TODO: What is this opperator? => */
/* 'Let' is handled here */
AtExpr:
    Const                               { $1                      }
  | NAME                                { Var ($2)                }
  | LOCAL Bindings IN Expr END          { Let ($2, $4)}
  | FN TypedName ARROW Expr END         { Lam ($2, $4)            }
  | LPAR Expr RPAR                      { $2                      }
  | LPAR LBRAK RBRAK COL type RPAR      { (ListT ($5), AnyT)}
;

Const:
    NAT                                 { (Con ($1), IntT)        }
  | TRUE                                { (Con 1, BoolT)          }
  | FALSE                               { (Con 0, BoolT)          }
  | NULL                                { (Con 0, UnitT)          }
;

TypedName:
    LPAR NAME COL Type RPAR             { (tname ($2, $4), AnyT)}
;

Bindings:
    Binding Bindings                        { ($1, $2) }
  | Binding                                 { $1 }
;

Binding:
    VAR NAME EQ Expr                        { (V($2, $4), AnyT)  }
    FUN NAME TypedName EQ Expr              { (V($2, $5), AnyT)  }
    FUN REC NAME TypedName COL Type EQ Expr { (F($3, $4, $6, $8)), AnyT }
;

AppExpr:
    AtExpr AtExpr                       { Call ($1, $2)           }
  | AppExpr AtExpr                      { Call ($1, $2)           }
;

Type:
   UNIT                                 { UnitT }
 | BOOL                                 { BoolT }
 | INT                                  { IntT  }
 | Type ARROW Type                      { (ArrowT ($1, $3), AnyT) }
 | Type LIST                            { (ListT ($1), AnyT)}
 | LPAR Type RPAR                       { $2 }
;
